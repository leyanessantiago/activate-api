// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id				          String	@id		@default(uuid())
  userName		        String?	@unique @db.VarChar(255)
  email			          String	@unique
  name			          String?	@db.VarChar(255)
  lastName		        String?	@db.VarChar(255)
  password		        String
  publisher		        Publisher?
  consumer		        Consumer?
  verificationLevel   Int @default(0)
  verificationCode    Int?
  avatar              String?
  theme               String?
  useDarkStyle        Boolean?
  comments            Comment[]
  interests           UserInterests[]
  createdActivities   Activity[] @relation("CreatedActivities")
  receivedActivities  Activity[] @relation("ReceivedActivities")
}

model Publisher {
  events      Event[]    @relation(name: "EventAuthor")
  followers  Consumer[] @relation("Follower")
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @id
}

model Consumer {
  following         Publisher[]     @relation("Follower")
  friends           Consumer[]      @relation(name: "FriendShip")
  friendOf          Consumer[]      @relation(name: "FriendShip")
  eventsFollowed    Event[]         @relation(name: "EventFollower")
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @id
  sentRequests      FriendRequest[] @relation("SentRequests")
  receivedRequests  FriendRequest[] @relation("ReceivedRequests")
}

model FriendRequest {
  creator       Consumer @relation("SentRequests", fields: [creatorId], references: [userId])
  creatorId     String
  receiver      Consumer @relation("ReceivedRequests", fields: [receiverId], references: [userId])
  receiverId    String
  dateSent      DateTime @default(now())

  @@id([creatorId, receiverId])
}

model Category {
  id              String          @id @default(uuid())
  name            String          @unique @db.VarChar(255)
  icon            String
  parentId        String?
  parent          Category?       @relation("SubCategories", fields: [parentId], references: [id])
  subcategories   Category[]      @relation("SubCategories")
  events          Event[]
  userInterests   UserInterests[]
}

model Event {
  id            String     @id @default(uuid())
  name          String     @db.VarChar(255)
  date          DateTime
  address       String
  description   String?
  image         String?
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    String
  author        Publisher  @relation(name: "EventAuthor", fields: [authorId], references: [userId])
  authorId      String
  followers     Consumer[] @relation(name: "EventFollower")
  comments      Comment[]
  activities    Activity[]
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  response      String?
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  event         Event    @relation(fields: [eventId], references: [id])
  eventId       String
  dateCreated   DateTime @default(now())
  dateResponded DateTime?
  activity      Activity[]
}

model Activity {
  id          String    @id @default(uuid())
  type        Int
  creator     User      @relation("CreatedActivities", fields: [creatorId], references: [id])
  creatorId   String
  receiver    User      @relation("ReceivedActivities", fields: [receiverId], references: [id])
  receiverId  String
  event       Event?    @relation(fields: [eventId], references: [id])
  eventId     String?
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId   String?
  seen        Boolean?  @default(false)
  dateSent    DateTime  @default(now())
}

model UserInterests {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  relevance  Int      @default(0)

  @@id([userId, categoryId])
}
